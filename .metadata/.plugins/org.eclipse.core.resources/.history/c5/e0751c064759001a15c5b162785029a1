package com.example.completeablefuture.demo;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class DemoTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ExecutorService service=Executors.newFixedThreadPool(10);
		//Future<Order> f1=service.submit(new Task());
		try {
			Future<Order> f1=service.submit(new Task());
			Order order=f1.get();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ExecutionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	static class Task implements Callable<Order>{

		@Override
		public Order call() throws Exception {
			// TODO Auto-generated method stub
			return new Order();
		}
		
	}
	static class Order
	{
		public void payment()
		{
			System.out.println("payment");
		}
		public void service()
		{
			System.out.println("method service");
		}
		public void dbconnection()
		{
			System.out.println("method db connection");
		}
		public void transaction()
		{
			System.out.println("method transaction");
		}
	}

}
